/**
 * The Loop PWA - Service Worker
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå
 */

// ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Cache
const CACHE_NAME = 'the-loop-v1.0.0';
const STATIC_CACHE_NAME = 'the-loop-static-v1.0.0';
const IMAGE_CACHE_NAME = 'the-loop-images-v1.0.0';

// ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏™‡∏°‡∏≠ (Core App Files)
const CORE_FILES = [
    './',
    './index.html',
    './style.css',
    './app.js',
    './manifest.json'
];

// ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Ñ‡∏ä (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á)
const ICON_FILES = [
    './icon-192x192.png',
    './icon-512x512.png'
];

/**
 * Event: Install
 * ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Service Worker ‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
 */
self.addEventListener('install', (event) => {
    console.log('üîß Service Worker: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...');
    
    event.waitUntil(
        Promise.all([
            // ‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
            caches.open(STATIC_CACHE_NAME).then((cache) => {
                console.log('üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å...');
                return cache.addAll(CORE_FILES);
            }),
            
            // ‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            caches.open(STATIC_CACHE_NAME).then((cache) => {
                console.log('üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô...');
                // ‡πÉ‡∏ä‡πâ Promise.allSettled ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ñ‡πâ‡∏≤‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ
                return Promise.allSettled(
                    ICON_FILES.map(file => cache.add(file).catch(() => console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô: ${file}`)))
                );
            })
        ]).then(() => {
            console.log('‚úÖ Service Worker: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Service Worker ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            return self.skipWaiting();
        })
    );
});

/**
 * Event: Activate
 * ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Service Worker ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á Cache ‡πÄ‡∏Å‡πà‡∏≤
 */
self.addEventListener('activate', (event) => {
    console.log('üöÄ Service Worker: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...');
    
    event.waitUntil(
        Promise.all([
            // ‡∏•‡πâ‡∏≤‡∏á Cache ‡πÄ‡∏Å‡πà‡∏≤
            caches.keys().then((cacheNames) => {
                return Promise.all(
                    cacheNames.map((cacheName) => {
                        if (cacheName !== STATIC_CACHE_NAME && 
                            cacheName !== IMAGE_CACHE_NAME && 
                            cacheName !== CACHE_NAME) {
                            console.log(`üóëÔ∏è ‡∏•‡∏ö Cache ‡πÄ‡∏Å‡πà‡∏≤: ${cacheName}`);
                            return caches.delete(cacheName);
                        }
                    })
                );
            }),
            
            // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Client ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            self.clients.claim()
        ]).then(() => {
            console.log('‚úÖ Service Worker: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        })
    );
});

/**
 * Event: Fetch
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
 */
self.addEventListener('fetch', (event) => {
    const request = event.request;
    const url = new URL(request.url);
    
    // ‡∏Ç‡πâ‡∏≤‡∏° request ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà HTTP/HTTPS
    if (!request.url.startsWith('http')) {
        return;
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á request
    if (isImageRequest(request)) {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ‡πÉ‡∏ä‡πâ Cache First Strategy
        event.respondWith(handleImageRequest(request));
    } else if (isCoreFileRequest(request)) {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å: ‡πÉ‡∏ä‡πâ Cache First Strategy
        event.respondWith(handleCoreFileRequest(request));
    } else if (isVideoRequest(request)) {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: ‡πÉ‡∏ä‡πâ Network Only Strategy (‡πÑ‡∏°‡πà‡πÅ‡∏Ñ‡∏ä)
        event.respondWith(handleVideoRequest(request));
    } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ‡πÉ‡∏ä‡πâ Network First Strategy
        event.respondWith(handleNetworkFirstRequest(request));
    }
});

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {Request} request 
 * @returns {boolean}
 */
function isImageRequest(request) {
    return request.destination === 'image' || 
           /\.(jpg|jpeg|png|gif|webp|svg|ico)(\?.*)?$/i.test(request.url);
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {Request} request 
 * @returns {boolean}
 */
function isCoreFileRequest(request) {
    const url = new URL(request.url);
    return CORE_FILES.some(file => url.pathname.endsWith(file.replace('./', ''))) ||
           url.pathname === '/' ||
           url.pathname === '/index.html';
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {Request} request 
 * @returns {boolean}
 */
function isVideoRequest(request) {
    return request.destination === 'video' || 
           /\.(mp4|webm|ogg|avi|mov|wmv|flv)(\?.*)?$/i.test(request.url);
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Cache First Strategy)
 * @param {Request} request 
 * @returns {Promise<Response>}
 */
async function handleImageRequest(request) {
    try {
        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô Cache ‡∏Å‡πà‡∏≠‡∏ô
        const cache = await caches.open(IMAGE_CACHE_NAME);
        const cachedResponse = await cache.match(request);
        
        if (cachedResponse) {
            console.log(`üì∑ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Cache: ${request.url}`);
            return cachedResponse;
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Cache ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Network
        console.log(`üåê ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà: ${request.url}`);
        const networkResponse = await fetch(request);
        
        // ‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
        if (networkResponse.ok) {
            const responseClone = networkResponse.clone();
            cache.put(request, responseClone);
            console.log(`üíæ ‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà: ${request.url}`);
        }
        
        return networkResponse;
        
    } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: ${request.url}`, error);
        
        // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û placeholder ‡∏´‡∏£‡∏∑‡∏≠ error response
        return new Response(
            '<svg xmlns="http://www.w3.org/2000/svg" width="400" height="300" viewBox="0 0 400 300"><rect width="400" height="300" fill="#333"/><text x="200" y="150" text-anchor="middle" fill="#fff" font-family="Arial" font-size="16">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ</text></svg>',
            {
                headers: {
                    'Content-Type': 'image/svg+xml',
                    'Cache-Control': 'no-cache'
                }
            }
        );
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å (Cache First Strategy)
 * @param {Request} request 
 * @returns {Promise<Response>}
 */
async function handleCoreFileRequest(request) {
    try {
        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô Cache ‡∏Å‡πà‡∏≠‡∏ô
        const cache = await caches.open(STATIC_CACHE_NAME);
        const cachedResponse = await cache.match(request);
        
        if (cachedResponse) {
            console.log(`üìÅ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Cache: ${request.url}`);
            return cachedResponse;
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Cache ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Network
        console.log(`üåê ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà: ${request.url}`);
        const networkResponse = await fetch(request);
        
        // ‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
        if (networkResponse.ok) {
            const responseClone = networkResponse.clone();
            cache.put(request, responseClone);
        }
        
        return networkResponse;
        
    } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${request.url}`, error);
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô HTML ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô offline page
        if (request.destination === 'document') {
            return new Response(
                `<!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <title>The Loop - Offline</title>
                    <style>
                        body { 
                            font-family: Arial, sans-serif; 
                            background: #000; 
                            color: #fff; 
                            display: flex; 
                            align-items: center; 
                            justify-content: center; 
                            height: 100vh; 
                            margin: 0; 
                            text-align: center;
                        }
                        .offline-message {
                            max-width: 400px;
                            padding: 20px;
                        }
                        h1 { color: #fff; margin-bottom: 20px; }
                        p { margin-bottom: 15px; line-height: 1.5; }
                        button {
                            background: #fff;
                            color: #000;
                            border: none;
                            padding: 10px 20px;
                            border-radius: 5px;
                            cursor: pointer;
                            font-size: 16px;
                        }
                        button:hover { background: #f0f0f0; }
                    </style>
                </head>
                <body>
                    <div class="offline-message">
                        <h1>üîå ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå</h1>
                        <p>‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
                        <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                        <button onclick="window.location.reload()">‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</button>
                    </div>
                </body>
                </html>`,
                {
                    headers: {
                        'Content-Type': 'text/html',
                        'Cache-Control': 'no-cache'
                    }
                }
            );
        }
        
        throw error;
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (Network Only Strategy)
 * @param {Request} request 
 * @returns {Promise<Response>}
 */
async function handleVideoRequest(request) {
    try {
        console.log(`üé¨ ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: ${request.url}`);
        return await fetch(request);
    } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ: ${request.url}`, error);
        throw error;
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ request ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (Network First Strategy)
 * @param {Request} request 
 * @returns {Promise<Response>}
 */
async function handleNetworkFirstRequest(request) {
    try {
        // ‡∏•‡∏≠‡∏á Network ‡∏Å‡πà‡∏≠‡∏ô
        const networkResponse = await fetch(request);
        
        // ‡πÅ‡∏Ñ‡∏ä‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (networkResponse.ok) {
            const cache = await caches.open(CACHE_NAME);
            cache.put(request, networkResponse.clone());
        }
        
        return networkResponse;
        
    } catch (error) {
        // ‡∏ñ‡πâ‡∏≤ Network ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô Cache
        const cache = await caches.open(CACHE_NAME);
        const cachedResponse = await cache.match(request);
        
        if (cachedResponse) {
            console.log(`üì¶ ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Cache (Network ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß): ${request.url}`);
            return cachedResponse;
        }
        
        throw error;
    }
}

/**
 * Event: Message
 * ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Main Thread
 */
self.addEventListener('message', (event) => {
    const { type, data } = event.data;
    
    switch (type) {
        case 'SKIP_WAITING':
            // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Service Worker ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            self.skipWaiting();
            break;
            
        case 'CACHE_IMAGES':
            // ‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
            if (data && data.imageUrls) {
                cacheImages(data.imageUrls);
            }
            break;
            
        case 'CLEAR_CACHE':
            // ‡∏•‡πâ‡∏≤‡∏á Cache
            clearAllCaches();
            break;
            
        default:
            console.log('üì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å:', type);
    }
});

/**
 * ‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
 * @param {Array<string>} imageUrls 
 */
async function cacheImages(imageUrls) {
    try {
        const cache = await caches.open(IMAGE_CACHE_NAME);
        console.log(`üñºÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ ${imageUrls.length} ‡∏£‡∏π‡∏õ...`);
        
        const cachePromises = imageUrls.map(async (url) => {
            try {
                const response = await fetch(url);
                if (response.ok) {
                    await cache.put(url, response);
                    console.log(`‚úÖ ‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${url}`);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: ${url}`, error);
            }
        });
        
        await Promise.allSettled(cachePromises);
        console.log('üéâ ‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', error);
    }
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á Cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
async function clearAllCaches() {
    try {
        const cacheNames = await caches.keys();
        await Promise.all(cacheNames.map(name => caches.delete(name)));
        console.log('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á Cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á Cache:', error);
    }
}

/**
 * Event: Error
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
 */
self.addEventListener('error', (event) => {
    console.error('‚ùå Service Worker Error:', event.error);
    event.preventDefault();
});

/**
 * Event: Unhandled Promise Rejection
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Promise ‡∏ó‡∏µ‡πà reject ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
 */
self.addEventListener('unhandledrejection', (event) => {
    console.error('‚ùå Unhandled Promise Rejection:', event.reason);
    event.preventDefault();
});

